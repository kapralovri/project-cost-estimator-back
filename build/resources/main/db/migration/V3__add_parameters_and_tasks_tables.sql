-- Создаем таблицу parameters
CREATE TABLE parameters (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    estimate_id BIGINT NOT NULL,
    name VARCHAR(255) NOT NULL,
    param_value VARCHAR(1000) NOT NULL,
    type VARCHAR(50) DEFAULT 'string' NOT NULL,
    description TEXT,
    unit VARCHAR(50),
    min_value DECIMAL(19,2),
    max_value DECIMAL(19,2),
    is_required BOOLEAN DEFAULT FALSE NOT NULL,
    sort_order INTEGER DEFAULT 0 NOT NULL,
    CONSTRAINT fk_parameters_estimate FOREIGN KEY (estimate_id)
        REFERENCES estimates(id) ON DELETE CASCADE
);

-- Создаем таблицу tasks
CREATE TABLE tasks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    estimate_id BIGINT NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(100) DEFAULT 'development' NOT NULL,
    complexity VARCHAR(50) DEFAULT 'medium' NOT NULL,
    estimated_hours DECIMAL(19,2) DEFAULT 0 NOT NULL,
    actual_hours DECIMAL(19,2),
    status VARCHAR(50) DEFAULT 'planned' NOT NULL,
    priority VARCHAR(50) DEFAULT 'medium' NOT NULL,
    assigned_role VARCHAR(100),
    dependencies TEXT,
    start_date TIMESTAMP WITH TIME ZONE,
    due_date TIMESTAMP WITH TIME ZONE,
    completed_date TIMESTAMP WITH TIME ZONE,
    sort_order INTEGER DEFAULT 0 NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL,
    CONSTRAINT fk_tasks_estimate FOREIGN KEY (estimate_id)
        REFERENCES estimates(id) ON DELETE CASCADE
);

-- Создаем индексы для оптимизации запросов
CREATE INDEX idx_parameters_estimate ON parameters(estimate_id);
CREATE INDEX idx_parameters_sort ON parameters(estimate_id, sort_order);
CREATE INDEX idx_tasks_estimate ON tasks(estimate_id);
CREATE INDEX idx_tasks_sort ON tasks(estimate_id, sort_order);
CREATE INDEX idx_tasks_status ON tasks(estimate_id, status);
CREATE INDEX idx_tasks_category ON tasks(estimate_id, category);
